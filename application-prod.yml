eureka:
  client:
    service-url:
      defaultZone: ${PROD_EUREKA_SERVER_URL:http://eureka-service:8761/eureka}
    register-with-eureka: true
    fetch-registry: true

spring:
  # 운영환경 데이터베이스 설정
  datasource:
    url: ${PROD_DB_URL}
    username: ${PROD_DB_USERNAME}
    password: ${PROD_DB_PASSWORD}
    driver-class-name: org.mariadb.jdbc.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000

  jpa:
    hibernate:
      ddl-auto: validate
    database-platform: org.hibernate.dialect.MariaDBDialect
    show-sql: false
    properties:
      hibernate:
        format_sql: false

  # Redis 운영환경
  redis:
    host: redis # 환경변수 대신 직접 지정
    port: 6379
    password: ${PROD_REDIS_PASSWORD:}
    timeout: 3000ms

  # 🔥 Mail 설정 추가
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${PROD_MAIL_USERNAME}
    password: ${PROD_MAIL_PASSWORD}
    from: ${PROD_NOTIFICATION_FROM_EMAIL}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          ssl:
            trust: smtp.gmail.com
            protocols: TLSv1.2

  # RabbitMQ 운영환경
  rabbitmq:
    host: ${PROD_RABBITMQ_HOST}
    port: ${PROD_RABBITMQ_PORT:5672}
    username: ${PROD_RABBITMQ_USERNAME}
    password: ${PROD_RABBITMQ_PASSWORD}

  # Kafka 운영환경
  kafka:
    bootstrap-servers: ${PROD_KAFKA_SERVERS}

# 🔥 알림 설정 추가
notification:
  email:
    enabled: ${PROD_NOTIFICATION_EMAIL_ENABLED:true}
    from-email: ${PROD_NOTIFICATION_FROM_EMAIL}
    from-name: ${PROD_NOTIFICATION_FROM_NAME:쇼핑몰 알림}
    retry-count: 3
    retry-delay: 5000
  websocket:
    enabled: true
    max-connections: 1000
    heartbeat-interval: 30000
  batch:
    enabled: true
    reminder-job-cron: "0 */5 * * * *"
    thread-pool-size: 5
    batch-size: 100
    max-retry-count: 3

jwt:
  secret-key: ${PROD_JWT_SECRET_KEY}

management:
  endpoints:
    web:
      exposure:
        include: ["health", "info", "prometheus"]
  endpoint:
    health:
      show-details: when-authorized
    prometheus:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
  security:
    enabled: true

logging:
  level:
    org.kosa: INFO
    org.springframework.security: WARN
    root: INFO
