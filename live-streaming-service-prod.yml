spring:
  application:
    name: live-streaming-service

  # Redis 설정 수정 (Docker 서비스명 직접 지정)
  redis:
    host: redis # localhost 대신 Docker 서비스명 사용
    port: 6379
    password: ${PROD_REDIS_PASSWORD:}
    timeout: 3000ms
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0

  # 데이터베이스 설정
  datasource:
    url: ${PROD_DB_URL}
    username: ${PROD_DB_USERNAME}
    password: ${PROD_DB_PASSWORD}
    driver-class-name: org.mariadb.jdbc.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        format_sql: false
        dialect: org.hibernate.dialect.MariaDBDialect

  # 메일 설정 개선
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${PROD_MAIL_USERNAME}
    password: ${PROD_MAIL_PASSWORD}
    from: ${PROD_NOTIFICATION_FROM_EMAIL} # 추가
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          ssl:
            trust: smtp.gmail.com
            protocols: TLSv1.2
          connectiontimeout: 10000
          timeout: 10000
          writetimeout: 10000
        debug: true

  kafka:
    bootstrap-servers: kafka:9093 # Docker 서비스명 사용
    consumer:
      group-id: notification-group-prod
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
        session.timeout.ms: 30000
        heartbeat.interval.ms: 10000
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      retries: 3
      acks: all

server:
  port: 8096

# 알림 설정 개선 (GitHub Secrets 활용)
notification:
  email:
    enabled: ${PROD_NOTIFICATION_EMAIL_ENABLED:true}
    from-email: ${PROD_NOTIFICATION_FROM_EMAIL}
    from-name: ${PROD_NOTIFICATION_FROM_NAME:쇼핑몰 알림}
    retry-count: 3
    retry-delay: 5000
  websocket:
    enabled: true
    max-connections: 1000
    heartbeat-interval: 30000
  batch:
    enabled: true
    reminder-job-cron: "0 */5 * * * *"
    thread-pool-size: 5
    batch-size: 100
    max-retry-count: 3

# User Service 설정
user-service:
  url: ${PROD_USER_SERVICE_URL:http://user-service:8103}

# Feign Client 설정
feign:
  client:
    config:
      default:
        connectTimeout: 10000
        readTimeout: 30000
        loggerLevel: basic
      user-service:
        connectTimeout: 10000
        readTimeout: 30000
        loggerLevel: basic
        url: ${PROD_USER_SERVICE_URL:http://user-service:8103}
      broadcast-service:
        connectTimeout: 10000
        readTimeout: 30000
        loggerLevel: basic
  circuitbreaker:
    enabled: true
    alphanumeric-ids:
      enabled: true

external-services:
  user-service-detail-url: ${PROD_USER_SERVICE_DETAIL_URL:http://user-service:8103/api/users}
  user-service-url: ${PROD_USER_SERVICE_URL:http://user-service:8103}
  broadcast-service-url: ${PROD_BROADCAST_SERVICE_URL:http://commerce-service:8090/api/broadcasts}
  frontend-base-url: ${PROD_FRONTEND_URL:http://13.209.253.241}
  unsubscribe-url: ${PROD_UNSUBSCRIBE_URL:http://13.209.253.241/unsubscribe}

logging:
  level:
    org.kosa.livestreamingservice: INFO
    org.springframework.mail: DEBUG # 이메일 디버깅 활성화
    org.springframework.kafka: WARN
    org.springframework.cloud.openfeign: DEBUG
    feign: DEBUG
    org.springframework.data.redis: DEBUG # Redis 디버깅 추가

# Eureka 클라이언트 설정
eureka:
  client:
    service-url:
      defaultZone: ${PROD_EUREKA_SERVER_URL:http://eureka-service:8761/eureka}
    register-with-eureka: true
    fetch-registry: true
  instance:
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 10
    lease-expiration-duration-in-seconds: 30

# Management 설정
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,circuitbreakers,circuitbreakerevents,retries,prometheus
  metrics:
    export:
      prometheus:
        enabled: true
  endpoint:
    prometheus:
      enabled: true
